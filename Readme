Car Price Scraper & Predictor

This Python project scrapes car listings from a popular Iranian website and predicts car prices based on features such as model, mileage, year, and location. The project uses BeautifulSoup for web scraping, sqlite3 for data storage, and scikit-learn for building a linear regression model to predict car prices.

Features

	•	Scrapes 200 pages of car listings from Bama.ir
	•	Extracts key details such as:
	•	Car Model
	•	Mileage (Kilometers)
	•	Year of Manufacture
	•	City
	•	Price
	•	Stores the data in a SQLite database
	•	Uses Linear Regression to predict car prices
	•	Allows users to input custom car details for price prediction

Requirements

To run this project, you’ll need:

	•	Python 3.x
	•	Required libraries (can be installed via pip):

  pip install requests beautifulsoup4 pandas scikit-learn

Project Structure

	1.	Data Extraction:
	•	The script scrapes data from the first 200 pages of the car listings on Bama.ir.
	•	It filters out listings with unspecified (“توافقی”) prices and saves relevant information (model, mileage, year, city, and price) to a SQLite database.
	2.	Data Preprocessing:
	•	Converts the scraped mileage and year into integer values.
	•	Transforms categorical features (city and car model) into dummy/one-hot encoded variables for machine learning purposes.
	3.	Model Training:
	•	Splits the dataset into training and test sets.
	•	Uses Linear Regression from scikit-learn to build a predictive model.
	4.	Price Prediction:
	•	Provides a function predict_price() that allows users to predict car prices based on the car’s features (mileage, year, city, and model).

How to Use

	1.	Clone the repository and navigate to the project directory:
  git clone https://github.com/your-username/car-price-predictor.git
cd car-price-predictor
	2.	Run the scraper to collect data and store it in the database:
  python scraper.py
	3.	Train the model and make predictions:
  python model.py
	4.	Predict the price of a car by providing custom inputs (example):
  kilometer = 50000
year = 2018
city = 'تهران'
car_model = 'پژو 206'
predicted_price = predict_price(model, kilometer, year, city, car_model)
print('Predicted Price:', predicted_price)

Example Output

After running the code, you’ll get an output like this:


Mean Absolute Error: 1200000
Predicted Price: 85000000 Toman


Future Improvements

	•	Expand the Dataset: The project currently scrapes 200 pages. More data can be collected for better model accuracy.
	•	Improve the Model: Experiment with more advanced algorithms like Decision Trees, Random Forests, or XGBoost for better performance.
	•	Add Features: Integrate additional features such as fuel type, transmission, and car condition to improve price prediction accuracy.



Feel free to customize the template as needed!





